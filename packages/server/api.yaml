swagger: '2.0'

info:
  description: SARA REST API definition
  version: 1.0.0
  title: SARA (Sales Reporter Applicaltion) REST services
  contact:
    email: miller.gonzalez@globant.com

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.

     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.

     The following syntax must be used in the 'Authorization' header :

         Bearer xxxxxx.yyyyyyy.zzzzzz

paths:
  /api-status:
    get:
      x-swagger-router-controller: status
      operationId: "getInfo"
      summary: Returns 200 if the api is running
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        403:
          description: Access Denied
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  #FORMS
  /program:
    get:
      x-swagger-router-controller: program
      operationId: "getPrograms"
      summary: Returns the list of probrams.
      description: This will be used to populate the insert and update dropdowns
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/ProgramListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'
    post:
      x-swagger-router-controller: program
      operationId: "addNewProgram"
      summary: Create a new program
      description: N/A
      security:
        - Bearer: []
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ProgramBody'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /program/{id}:
    get:
      x-swagger-router-controller: program
      operationId: "getProgramById"
      summary: get a program by id
      description: N/A
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          description: ID of program to fetch
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/ProgramResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'
    put:
      x-swagger-router-controller: program
      operationId: "updateProgram"
      summary: Update a program
      security:
        - Bearer: []
      description: N/A
      parameters:
        - in: path
          name: id
          description: ID of program to be updated
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ProgramBody'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'
    delete:
      x-swagger-router-controller: program
      operationId: "deleteProgram"
      summary: Delete a program
      security:
        - Bearer: []
      description: N/A
      parameters:
        - in: path
          name: id
          description: ID of program to be deleted
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ProgramBodyDelete'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /programs/{userId}:
    post:
      x-swagger-router-controller: program
      operationId: "getProgramsFull"
      summary: Returns the list of programs.
      security:
        - Bearer: []
      description: This will be used to populate the activity table
      parameters:
        - in: path
          name: userId
          description: ID of user to fetch programs
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/FullProgramsBody'
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/ProgramListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /programs/region/{regionId}:
    get:
      x-swagger-router-controller: program
      operationId: "getProgramsByRegionId"
      summary: Returns the list of programs.
      security:
        - Bearer: []
      description: This will be used to populate the activity table
      parameters:
        - in: path
          name: regionId
          description: ID of region to fetch programs
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/ProgramListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /region:
    get:
      x-swagger-router-controller: region
      operationId: "getRegion"
      summary: Returns the list of regions.
      security:
        - Bearer: []
      description: This will be used to populate the insert and update dropdowns

      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/RegionListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'
    post:
      x-swagger-router-controller: region
      operationId: "addNewRegion"
      summary: Create a new region
      security:
        - Bearer: []
      description: N/A
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/RegionBody'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /lifecycle-stage:
    get:
      x-swagger-router-controller: lifecycleStage
      operationId: "getAllLifecycleStages"
      summary: Returns the list of lifecycle stages.
      security:
        - Bearer: []
      description: This will be used to populate the insert and update dropdowns
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/LifecycleStageListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'
    post:
      x-swagger-router-controller: lifecycleStage
      operationId: "addNewLifecycleStage"
      summary: Create a new lifecycle
      security:
        - Bearer: []
      description: N/A
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/LifecycleStageBody'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /apm1:
    get:
      x-swagger-router-controller: apm1
      operationId: "getAllAPM1"
      summary: Returns the list of apm1.
      security:
        - Bearer: []
      description: This will be used to populate the insert and update dropdowns
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/APM1ListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'
    post:
      x-swagger-router-controller: apm1
      operationId: "addNewAPM1"
      summary: Create a new apm1
      security:
        - Bearer: []
      description: N/A
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/APM1Body'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /apm2:
    get:
      x-swagger-router-controller: apm2
      operationId: "getAllAPM2"
      summary: Returns the list of apm2.
      security:
        - Bearer: []
      description: This will be used to populate the insert and update dropdowns
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/APM2ListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'
    post:
      x-swagger-router-controller: apm2
      operationId: "addNewAPM2"
      summary: Create a new apm2
      description: N/A
      security:
        - Bearer: []
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/APM2Body'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /industry:
    get:
      x-swagger-router-controller: industry
      operationId: "getAllIndustries"
      summary: Returns the list of industries.
      security:
        - Bearer: []
      description: This will be used to populate the insert and update dropdowns
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/IndustryListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'
    post:
      x-swagger-router-controller: industry
      operationId: "addNewIndustry"
      summary: Create a new industry
      security:
        - Bearer: []
      description: N/A
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/IndustryBody'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /segment:
    get:
      x-swagger-router-controller: segment
      operationId: "getAllSegments"
      summary: Returns the list of segments.
      security:
        - Bearer: []
      description: This will be used to populate the insert and update dropdowns
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/SegmentListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'
    post:
      x-swagger-router-controller: segment
      operationId: "addNewSegment"
      summary: Create a new segment
      description: N/A
      security:
        - Bearer: []
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/SegmentBody'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /persona:
    get:
      x-swagger-router-controller: persona
      operationId: "getAllPersonas"
      summary: Returns the list of personas.
      security:
        - Bearer: []
      description: This will be used to populate the insert and update dropdowns
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/PersonaListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'
    post:
      x-swagger-router-controller: persona
      operationId: "addNewPersona"
      summary: Create a new persona
      security:
        - Bearer: []
      description: N/A
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/PersonaBody'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /format:
    get:
      x-swagger-router-controller: format
      operationId: "getAllFormats"
      summary: Returns the list of formats.
      security:
        - Bearer: []
      description: This will be used to populate the insert and update dropdowns
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/FormatListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'
    post:
      x-swagger-router-controller: format
      operationId: "addNewFormat"
      summary: Create a new format
      security:
        - Bearer: []
      description: N/A
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/FormatBody'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /format/{tacticId}:
    get:
      x-swagger-router-controller: format
      operationId: "getFormatsByTacticId"
      summary: Returns the list of formats filtered by tacticId.
      security:
        - Bearer: []
      parameters:
        - in: path
          name: tacticId
          description: ID of tactic to fetch
          required: true
          type: string
      description: This will be used to populate the insert and update dropdowns
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/FormatListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /tactic:
    get:
      x-swagger-router-controller: tactic
      operationId: "getTactics"
      summary: Returns the list of tactics.
      security:
        - Bearer: []
      description: This will be used to populate the insert and update dropdowns
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/TacticListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  #REPORTS
  /activity:
    post:
      x-swagger-router-controller: activity
      operationId: "addNewActivity"
      summary: Create a new activity
      security:
        - Bearer: []
      description: N/A
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ActivityBody'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'
    delete:
      x-swagger-router-controller: activity
      operationId: "deleteActivity"
      summary: Delete an activity
      security:
        - Bearer: []
      description: N/A
      parameters:
      - name: body
        in: body
        schema:
          $ref: '#/definitions/DeleteActivity'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /activities/{userId}:
    post:
      x-swagger-router-controller: activity
      operationId: "getActivities"
      summary: Returns the list of activities by user.
      security:
        - Bearer: []
      description: This will be used to populate the activities table
      parameters:
        - in: path
          name: userId
          description: ID of user to fetch activities
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetActivitiesBody'
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/ProgramListResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /activity/{id}:
    get:
      x-swagger-router-controller: activity
      operationId: "getActivityById"
      summary: get an activity by id
      security:
        - Bearer: []
      description: N/A
      parameters:
        - in: path
          name: id
          description: ID of activity to fetch
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/ActivityResponse'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

    put:
      x-swagger-router-controller: activity
      operationId: "updateActivity"
      summary: Update an activity by id
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          description: ID of activity to update
          required: true
          type: string
        - name: body
          in: body
          schema:
            $ref: '#/definitions/ActivityBody'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

  /login:
    post:
      x-swagger-router-controller: user
      operationId: "doLogin"
      summary: Returns login ok if the pwd and user match
      description: Used temporaly for the login endpoint
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/DoLoginBody'
      responses:
        200:
          description: Success
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'

        default:
          description: Invalid request.
          schema:
            allOf:
              - $ref: '#/definitions/ResponseStatus'
              - $ref: '#/definitions/Error'

#RESPONSES
definitions:
  ActivityBody:
    description: Body used for creating a new activity.
    type: object
    properties:
      title:
        type: string
      campaignId:
        type: [string, 'null']
      formatId:
        type: string
      abstract:
        type: string
      regionId:
        type: string
      startDate:
        type: string
      endDate:
        type: string
      asset:
        type: [string, 'null']
      userId:
        type: string
      programId:
        type: string
      customerMarketing:
        type: [boolean, 'null']

  GetActivitiesBody:
    description: Body used for get the activities based in a date filter
    type: object
    properties:
      date:
        type: string

  DeleteActivity:
    description: Body used for deleting one or more activities.
    type: object
    properties:
      activitiesId:
        type: array
        items:
          type: string

  ProgramCreateBody:
    description: Body used for creating a new program.
    type: object
    properties:
      name:
        type: string
      budget:
        type: number
      metrics:
        type: string
      parentCampaignId:
        type: string
      customerMessage:
        type: string
      businessGoal:
        type: string
      regionId:
        type: string
      lifecycleStageId:
        type: string
      apm1Id:
        type: string
      apm2Id:
        type: string
      industryId:
        type: string
      segmentId:
        type: string
      personaId:
        type: string
      userId:
        type: string

  ProgramBodyDelete:
    description: Body used for delete program.
    type: object
    properties:
      userId:
        type: string

  FullProgramsBody:
    description: Body used for retrieve full list of programs.
    type: object
    properties:
      programsStartDate:
        type: string
      programsEndDate:
        type: string
  ProgramBody:
    description: Body used for creating a new program.
    type: object
    properties:
      name:
        type: string
      owner:
        type: string
      budget:
        type: number
      metrics:
        type: number
      customerMessage:
        type: string
      regionId:
        type: string
      lifecycleStageId:
        type: array
        items:
          type: string
      apm1Id:
        type: array
        items:
          type: string
      apm2Id:
        type: array
        items:
          type: string
      industryId:
        type: array
        items:
          type: string
      segmentId:
        type: array
        items:
          type: string
      personaId:
        type: array
        items:
          type: string
      otherKpis:
        type: string
      year:
        type: number
      quarter:
        type: number
      year_quarter:
        type: number

  ProgramListResponse:
    description: A list of programs.
    type: object
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/Program'

  ProgramResponse:
    description: A program get by Id
    type: object
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/Program'

  activityListResponse:
    description: a list of activities.
    type: object
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/Activity'

  FormatListResponse:
    description: A list of formats.
    type: object
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/Format'

  FormatBody:
    description: Body used for creating a new format.
    type: object
    properties:
      name:
        type: string

  TacticListResponse:
    description: A list of tactics.
    type: object
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/Tactic'

  RegionListResponse:
    description: A list of regions.
    type: object
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/Region'

  RegionBody:
    description: Body used for creating a new region.
    type: object
    properties:
      name:
        type: string

  LifecycleStageListResponse:
    description: A list of lifecycle stages.
    type: object
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/LifecycleStage'

  LifecycleStageBody:
    description: Body used for creating a new lifecycleStage.
    type: object
    properties:
      name:
        type: string

  APM1ListResponse:
    description: A list of apm1.
    type: object
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/APM1'

  APM1Body:
    description: Body used for creating a new apm1.
    type: object
    properties:
      name:
        type: string

  APM2ListResponse:
    description: A list of apm2.
    type: object
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/APM2'

  APM2Body:
    description: Body used for creating a new apm2.
    type: object
    properties:
      name:
        type: string

  IndustryListResponse:
    description: A list of industries.
    type: object
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/Industry'

  IndustryBody:
    description: Body used for creating a new industry.
    type: object
    properties:
      name:
        type: string

  SegmentListResponse:
    description: A list of segments.
    type: object
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/Segment'

  SegmentBody:
    description: Body used for creating a new segment.
    type: object
    properties:
      name:
        type: string

  PersonaListResponse:
    description: A list of persona.
    type: object
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/Persona'

  PersonaBody:
    description: Body used for creating a new persona.
    type: object
    properties:
      name:
        type: string

  ResponseStatus:
    type: object
    properties:
      info:
        description: The object containing the HTTP status for the response.
        type: object
        properties:
          status:
            description: The numeric HTTP status code for the response.
            type: integer
            example: Status HTTP Code
          code:
            description: The textual HTTP status code for the response.
            type: string
            example: OK
        required:
          - status
          - code

  ActivityResponse:
    description: Single activity
    type: object
    properties:
      result:
        $ref: '#/definitions/Activity'

  DoLoginBody:
    description: Body used for creating a new user.
    type: object
    properties:
      username:
        type: string
      password:
        type: string


  Error:
    properties:
      message:
        type: string
    required:
      - message

  #MODELS
  Activity:
    type: object
    properties:
      title:
        type: string
      campaignId:
        type: string
      tacticId:
        type: string
      formatId:
        type: string
      abstract:
        type: string
      regionId:
        type: string
      startDate:
        type: string
      endDate:
        type: string
      asset:
        type: string
      userId:
        type: string
      programId:
        type: string
      customerMarketing:
        type: boolean

  Program:
    type: object
    properties:
      program_id:
        type: string
      label:
        type: string

  Format:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      label:
        type: string

  Tactic:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      label:
        type: string

  Region:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      label:
        type: string

  LifecycleStage:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      name:
        type: string

  APM1:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      name:
        type: string

  APM2:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      name:
        type: string

  Industry:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      name:
        type: string

  Segment:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      name:
        type: string

  Persona:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      name:
        type: string

  Status:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      name:
        type: string

schemes: ['http', 'https']
consumes: ['application/json']
produces: ['application/json']

host: localhost:3000
basePath: /api/v1
